{
  "address": "0x5dA724271075Ac8BeabDD6778de1Bc6EB87D1917",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minEth",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__EthNotEnough",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__SendingEthFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "players",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa72942f8f54faf86186e87a2c69cae668b0d3549d050a7d06c12bad22d58a0f3",
  "receipt": {
    "to": null,
    "from": "0xf70C4F65205e71835F023284DC65fa575D210464",
    "contractAddress": "0x5dA724271075Ac8BeabDD6778de1Bc6EB87D1917",
    "transactionIndex": 2,
    "gasUsed": "1319707",
    "logsBloom": "0x
    "blockHash": "0xafcdd2556fca15696e23cb1d80c0e224daaaf170fc4d0b8c51771c39813eb64a",
    "transactionHash": "0xa72942f8f54faf86186e87a2c69cae668b0d3549d050a7d06c12bad22d58a0f3",
    "logs": [],
    "blockNumber": 11328952,
    "cumulativeGasUsed": "19583579",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "500000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "18428",
    500000,
    30
  ],
  "numDeployments": 3,
  "solcInputHash": "f8c9f9da2b02ca26502eb6f0fa512cb1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__EthNotEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__SendingEthFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"players\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpKeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This implemented Chainlink VRF v2 and Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink keeper nodes call they look for the `upKeepNeeded` to return true. 1. Our time interval should have passed 2. The lottery should have at least 1 player, and have some ETH 3. Our subscription is funded with LINK 4. The lottery should be in an \\\"open\\\" state.\"}},\"title\":\"Simple Raffle contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n// Raffle the lottery (paying some amount)\\n// pick a random winner (verifiably random)\\n// winner to be selected every x minutes -> completely automated\\n// chainlink oracle => randomness, chainlink keepers => auto exec\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\n\\nerror Raffle__EthNotEnough();\\nerror Raffle__SendingEthFailed();\\nerror Raffle_NotOpen();\\nerror Raffle__UpKeepNotNeeded(uint256 balance, uint256 players, uint256 raffleState);\\n\\n/**\\n * @title Simple Raffle contract\\n * @dev This implemented Chainlink VRF v2 and Chainlink Keepers\\n */\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n  /* Type declarations */\\n  enum RaffleState {\\n    OPEN,\\n    CALCULATING\\n  }\\n\\n  /* State varaibles */\\n  VRFCoordinatorV2Interface immutable i_vrfCoordinator;\\n  RaffleState private s_raffleState;\\n  address payable[] private s_players;\\n  address private immutable i_owner;\\n  uint256 private immutable i_entranceFee;\\n  bytes32 private immutable i_gasLane;\\n  uint64 private immutable i_subscriptionId;\\n  uint32 private immutable i_callbackGasLimit;\\n  uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n  uint16 private constant NUM_WORDS = 1;\\n\\n  // Chainlink Keeprs variables\\n  uint256 public immutable i_interval;\\n  uint256 public s_lastTimeStamp;\\n\\n  // Lottery variables\\n  address private s_recentWinner;\\n\\n  /* Events */\\n  event RaffleEnter(address indexed player);\\n  event RequestedRaffleWinner(uint256 indexed requestId);\\n  event WinnerPicked(address indexed winner);\\n\\n  constructor(\\n    address vrfCoordinator,\\n    uint256 minEth,\\n    bytes32 gasLane,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    uint256 interval\\n  ) VRFConsumerBaseV2(vrfCoordinator) {\\n    i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinator);\\n    i_entranceFee = minEth;\\n    i_owner = msg.sender;\\n    i_gasLane = gasLane;\\n    i_subscriptionId = subscriptionId;\\n    i_callbackGasLimit = callbackGasLimit;\\n    i_interval = interval;\\n    s_lastTimeStamp = block.timestamp;\\n    s_raffleState = RaffleState.OPEN;\\n  }\\n\\n  /* Functions */\\n\\n  /**\\n   * @dev\\n   * This is the function that the Chainlink keeper nodes call\\n   * they look for the `upKeepNeeded` to return true.\\n   * 1. Our time interval should have passed\\n   * 2. The lottery should have at least 1 player, and have some ETH\\n   * 3. Our subscription is funded with LINK\\n   * 4. The lottery should be in an \\\"open\\\" state.\\n   */\\n  function checkUpkeep(\\n    bytes calldata /* checkData */\\n  )\\n    external\\n    view\\n    override\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory /* performData */\\n    )\\n  {\\n    bool isOpen = RaffleState.OPEN == s_raffleState;\\n    bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n    bool hasPlayers = s_players.length > 0;\\n    bool hasBalance = address(this).balance > 0;\\n\\n    upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\n\\n    return (upkeepNeeded, \\\"0x0\\\"); // can we comment this out?\\n  }\\n\\n  /**\\n   * @dev\\n   */\\n  function performUpkeep(\\n    bytes calldata /* performData */\\n  ) external override {\\n    //We highly recommend revalidating the upkeep in the performUpkeep function\\n    (bool upKeepNeeded, ) = this.checkUpkeep(\\\"\\\");\\n    if (!upKeepNeeded) {\\n      revert Raffle__UpKeepNotNeeded(\\n        address(this).balance,\\n        s_players.length,\\n        uint256(s_raffleState)\\n      );\\n    }\\n\\n    s_lastTimeStamp = block.timestamp;\\n    s_raffleState = RaffleState.CALCULATING;\\n    uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n      i_gasLane,\\n      i_subscriptionId,\\n      REQUEST_CONFIRMATIONS,\\n      i_callbackGasLimit, // sets the limit for how much computation fulfillRandomWords can consume\\n      NUM_WORDS\\n    );\\n    emit RequestedRaffleWinner(requestId);\\n    // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function\\n  }\\n\\n  function enterRaffle() public payable {\\n    if (msg.value < i_entranceFee) {\\n      revert Raffle__EthNotEnough();\\n    }\\n\\n    if (s_raffleState != RaffleState.OPEN) {\\n      revert Raffle_NotOpen();\\n    }\\n\\n    s_players.push(payable(msg.sender));\\n    emit RaffleEnter(msg.sender);\\n  }\\n\\n  function fulfillRandomWords(uint256, uint256[] memory randomWords) internal override {\\n    uint256 indexOfWinner = randomWords[0] % s_players.length;\\n    address payable recentWinner = s_players[indexOfWinner];\\n    s_recentWinner = recentWinner;\\n    s_raffleState = RaffleState.OPEN;\\n    s_players = new address payable[](0);\\n    (bool success, ) = s_recentWinner.call{value: address(this).balance}(\\\"\\\");\\n    if (!success) {\\n      revert Raffle__SendingEthFailed();\\n    }\\n    emit WinnerPicked(s_recentWinner);\\n  }\\n\\n  /* View / Pure functions */\\n  function getEntranceFee() public view returns (uint256) {\\n    return i_entranceFee;\\n  }\\n\\n  function getPlayer(uint256 index) public view returns (address) {\\n    return s_players[index];\\n  }\\n\\n  function getRaffleState() public view returns (RaffleState) {\\n    return s_raffleState;\\n  }\\n\\n   function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n  function getNumWords() public pure returns (uint256) {\\n    return NUM_WORDS;\\n  }\\n\\n  function getNumberOfPlayers() public view returns (uint256) {\\n    return s_players.length;\\n  }\\n\\n  function getLatestTimestamp() public view returns (uint256) {\\n    return s_lastTimeStamp;\\n  }\\n\\n  function getInterval() public view returns (uint256) {\\n    return i_interval;\\n  }\\n\\n  /* Modifiers */\\n  modifier onlyOwner() {\\n    require(msg.sender == i_owner);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x682d9d96bf9062f0c90cbd57499f73c79a17b6369bb5bbd740497825925c2448\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b5060405162001a5e38038062001a5e8339818101604052810190620000389190620002c8565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508460e081815250503373ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508361010081815250508267ffffffffffffffff166101208167ffffffffffffffff16815250508163ffffffff166101408163ffffffff16815250508061016081815250504260028190555060008060006101000a81548160ff0219169083600181111562000151576200015062000364565b5b021790555050505050505062000393565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001948262000167565b9050919050565b620001a68162000187565b8114620001b257600080fd5b50565b600081519050620001c6816200019b565b92915050565b6000819050919050565b620001e181620001cc565b8114620001ed57600080fd5b50565b6000815190506200020181620001d6565b92915050565b6000819050919050565b6200021c8162000207565b81146200022857600080fd5b50565b6000815190506200023c8162000211565b92915050565b600067ffffffffffffffff82169050919050565b620002618162000242565b81146200026d57600080fd5b50565b600081519050620002818162000256565b92915050565b600063ffffffff82169050919050565b620002a28162000287565b8114620002ae57600080fd5b50565b600081519050620002c28162000297565b92915050565b60008060008060008060c08789031215620002e857620002e762000162565b5b6000620002f889828a01620001b5565b96505060206200030b89828a01620001f0565b95505060406200031e89828a016200022b565b94505060606200033189828a0162000270565b93505060806200034489828a01620002b1565b92505060a06200035789828a01620001f0565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516101605161164c620004126000396000818161085e015281816108c2015261096d0152600061075d0152600061073a01526000610719015260008181610340015261043c01526000505060006106dd01526000818161037c01526103d0015261164c6000f3fe6080604052600436106100dd5760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b41461027e578063e55ae4e8146102a9578063f43b52cb146102e6578063fd6673f514610311576100dd565b806353a2c19a146101ea5780636919207d146102155780636e04ff0d14610240576100dd565b80632cfcc539116100bb5780632cfcc53914610161578063348540431461016b5780634585e33b14610196578063473f1ddc146101bf576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610d1f565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f9190610db1565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610f65565b61037a565b005b61016961043a565b005b34801561017757600080fd5b506101806105a7565b60405161018d9190610d1f565b60405180910390f35b3480156101a257600080fd5b506101bd60048036038101906101b8919061101c565b6105ad565b005b3480156101cb57600080fd5b506101d4610825565b6040516101e191906110aa565b60405180910390f35b3480156101f657600080fd5b506101ff61084f565b60405161020c9190610d1f565b60405180910390f35b34801561022157600080fd5b5061022a61085c565b6040516102379190610d1f565b60405180910390f35b34801561024c57600080fd5b506102676004803603810190610262919061101c565b610880565b604051610275929190611168565b60405180910390f35b34801561028a57600080fd5b50610293610969565b6040516102a09190610d1f565b60405180910390f35b3480156102b557600080fd5b506102d060048036038101906102cb9190611198565b610991565b6040516102dd91906110aa565b60405180910390f35b3480156102f257600080fd5b506102fb6109d9565b6040516103089190610d1f565b60405180910390f35b34801561031d57600080fd5b506103266109e3565b6040516103339190610d1f565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042c57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104239291906111c5565b60405180910390fd5b61043682826109f0565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610494576040517ffd22517b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104a8576104a7610d3a565b5b60008054906101000a900460ff1660018111156104c8576104c7610d3a565b5b146104ff576040517fd6e19a8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60025481565b60003073ffffffffffffffffffffffffffffffffffffffff16636e04ff0d6040518163ffffffff1660e01b81526004016105e690611214565b60006040518083038186803b1580156105fe57600080fd5b505afa158015610612573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061063b9190611306565b509050806106a8574760018054905060008054906101000a900460ff16600181111561066a57610669610d3a565b5b6040517f3a8d608600000000000000000000000000000000000000000000000000000000815260040161069f93929190611362565b60405180910390fd5b4260028190555060016000806101000a81548160ff021916908360018111156106d4576106d3610d3a565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161079e95949392919061144c565b602060405180830381600087803b1580156107b857600080fd5b505af11580156107cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f091906114b4565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600161ffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606060008060009054906101000a900460ff1660018111156108a7576108a6610d3a565b5b600060018111156108bb576108ba610d3a565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108ef9190611510565b1190506000806001805490501190506000804711905082801561090f5750835b80156109185750805b80156109215750815b9550856040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525095509550505050509250929050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600182815481106109a7576109a6611544565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b6000600180549050905090565b600060018054905082600081518110610a0c57610a0b611544565b5b6020026020010151610a1e91906115a2565b9050600060018281548110610a3657610a35611544565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060006101000a81548160ff02191690836001811115610ac957610ac8610d3a565b5b0217905550600067ffffffffffffffff811115610ae957610ae8610e22565b5b604051908082528060200260200182016040528015610b175781602001602082028036833780820191505090505b5060019080519060200190610b2d929190610c5f565b506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610b7690611601565b60006040518083038185875af1925050503d8060008114610bb3576040519150601f19603f3d011682016040523d82523d6000602084013e610bb8565b606091505b5050905080610bf3576040517f10c8163f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610cd8579160200282015b82811115610cd75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c7f565b5b509050610ce59190610ce9565b5090565b5b80821115610d02576000816000905550600101610cea565b5090565b6000819050919050565b610d1981610d06565b82525050565b6000602082019050610d346000830184610d10565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d7a57610d79610d3a565b5b50565b6000819050610d8b82610d69565b919050565b6000610d9b82610d7d565b9050919050565b610dab81610d90565b82525050565b6000602082019050610dc66000830184610da2565b92915050565b6000604051905090565b600080fd5b600080fd5b610de981610d06565b8114610df457600080fd5b50565b600081359050610e0681610de0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e5a82610e11565b810181811067ffffffffffffffff82111715610e7957610e78610e22565b5b80604052505050565b6000610e8c610dcc565b9050610e988282610e51565b919050565b600067ffffffffffffffff821115610eb857610eb7610e22565b5b602082029050602081019050919050565b600080fd5b6000610ee1610edc84610e9d565b610e82565b90508083825260208201905060208402830185811115610f0457610f03610ec9565b5b835b81811015610f2d5780610f198882610df7565b845260208401935050602081019050610f06565b5050509392505050565b600082601f830112610f4c57610f4b610e0c565b5b8135610f5c848260208601610ece565b91505092915050565b60008060408385031215610f7c57610f7b610dd6565b5b6000610f8a85828601610df7565b925050602083013567ffffffffffffffff811115610fab57610faa610ddb565b5b610fb785828601610f37565b9150509250929050565b600080fd5b60008083601f840112610fdc57610fdb610e0c565b5b8235905067ffffffffffffffff811115610ff957610ff8610fc1565b5b60208301915083600182028301111561101557611014610ec9565b5b9250929050565b6000806020838503121561103357611032610dd6565b5b600083013567ffffffffffffffff81111561105157611050610ddb565b5b61105d85828601610fc6565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061109482611069565b9050919050565b6110a481611089565b82525050565b60006020820190506110bf600083018461109b565b92915050565b60008115159050919050565b6110da816110c5565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561111a5780820151818401526020810190506110ff565b83811115611129576000848401525b50505050565b600061113a826110e0565b61114481856110eb565b93506111548185602086016110fc565b61115d81610e11565b840191505092915050565b600060408201905061117d60008301856110d1565b818103602083015261118f818461112f565b90509392505050565b6000602082840312156111ae576111ad610dd6565b5b60006111bc84828501610df7565b91505092915050565b60006040820190506111da600083018561109b565b6111e7602083018461109b565b9392505050565b50565b60006111fe6000836110eb565b9150611209826111ee565b600082019050919050565b6000602082019050818103600083015261122d816111f1565b9050919050565b61123d816110c5565b811461124857600080fd5b50565b60008151905061125a81611234565b92915050565b600080fd5b600067ffffffffffffffff8211156112805761127f610e22565b5b61128982610e11565b9050602081019050919050565b60006112a96112a484611265565b610e82565b9050828152602081018484840111156112c5576112c4611260565b5b6112d08482856110fc565b509392505050565b600082601f8301126112ed576112ec610e0c565b5b81516112fd848260208601611296565b91505092915050565b6000806040838503121561131d5761131c610dd6565b5b600061132b8582860161124b565b925050602083015167ffffffffffffffff81111561134c5761134b610ddb565b5b611358858286016112d8565b9150509250929050565b60006060820190506113776000830186610d10565b6113846020830185610d10565b6113916040830184610d10565b949350505050565b6000819050919050565b6113ac81611399565b82525050565b600067ffffffffffffffff82169050919050565b6113cf816113b2565b82525050565b600061ffff82169050919050565b6113ec816113d5565b82525050565b600063ffffffff82169050919050565b61140b816113f2565b82525050565b6000819050919050565b600061143661143161142c846113d5565b611411565b6113f2565b9050919050565b6114468161141b565b82525050565b600060a08201905061146160008301886113a3565b61146e60208301876113c6565b61147b60408301866113e3565b6114886060830185611402565b611495608083018461143d565b9695505050505050565b6000815190506114ae81610de0565b92915050565b6000602082840312156114ca576114c9610dd6565b5b60006114d88482850161149f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061151b82610d06565b915061152683610d06565b925082821015611539576115386114e1565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115ad82610d06565b91506115b883610d06565b9250826115c8576115c7611573565b5b828206905092915050565b600081905092915050565b60006115eb6000836115d3565b91506115f6826111ee565b600082019050919050565b600061160c826115de565b915081905091905056fea2646970667358221220c1e03c0e5adde5dcf08ed301ab2f245c0b8ce12f19df7656175abf2d081566da64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b41461027e578063e55ae4e8146102a9578063f43b52cb146102e6578063fd6673f514610311576100dd565b806353a2c19a146101ea5780636919207d146102155780636e04ff0d14610240576100dd565b80632cfcc539116100bb5780632cfcc53914610161578063348540431461016b5780634585e33b14610196578063473f1ddc146101bf576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610d1f565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f9190610db1565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610f65565b61037a565b005b61016961043a565b005b34801561017757600080fd5b506101806105a7565b60405161018d9190610d1f565b60405180910390f35b3480156101a257600080fd5b506101bd60048036038101906101b8919061101c565b6105ad565b005b3480156101cb57600080fd5b506101d4610825565b6040516101e191906110aa565b60405180910390f35b3480156101f657600080fd5b506101ff61084f565b60405161020c9190610d1f565b60405180910390f35b34801561022157600080fd5b5061022a61085c565b6040516102379190610d1f565b60405180910390f35b34801561024c57600080fd5b506102676004803603810190610262919061101c565b610880565b604051610275929190611168565b60405180910390f35b34801561028a57600080fd5b50610293610969565b6040516102a09190610d1f565b60405180910390f35b3480156102b557600080fd5b506102d060048036038101906102cb9190611198565b610991565b6040516102dd91906110aa565b60405180910390f35b3480156102f257600080fd5b506102fb6109d9565b6040516103089190610d1f565b60405180910390f35b34801561031d57600080fd5b506103266109e3565b6040516103339190610d1f565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042c57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104239291906111c5565b60405180910390fd5b61043682826109f0565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610494576040517ffd22517b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104a8576104a7610d3a565b5b60008054906101000a900460ff1660018111156104c8576104c7610d3a565b5b146104ff576040517fd6e19a8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60025481565b60003073ffffffffffffffffffffffffffffffffffffffff16636e04ff0d6040518163ffffffff1660e01b81526004016105e690611214565b60006040518083038186803b1580156105fe57600080fd5b505afa158015610612573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061063b9190611306565b509050806106a8574760018054905060008054906101000a900460ff16600181111561066a57610669610d3a565b5b6040517f3a8d608600000000000000000000000000000000000000000000000000000000815260040161069f93929190611362565b60405180910390fd5b4260028190555060016000806101000a81548160ff021916908360018111156106d4576106d3610d3a565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161079e95949392919061144c565b602060405180830381600087803b1580156107b857600080fd5b505af11580156107cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f091906114b4565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600161ffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606060008060009054906101000a900460ff1660018111156108a7576108a6610d3a565b5b600060018111156108bb576108ba610d3a565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108ef9190611510565b1190506000806001805490501190506000804711905082801561090f5750835b80156109185750805b80156109215750815b9550856040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525095509550505050509250929050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600182815481106109a7576109a6611544565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b6000600180549050905090565b600060018054905082600081518110610a0c57610a0b611544565b5b6020026020010151610a1e91906115a2565b9050600060018281548110610a3657610a35611544565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060006101000a81548160ff02191690836001811115610ac957610ac8610d3a565b5b0217905550600067ffffffffffffffff811115610ae957610ae8610e22565b5b604051908082528060200260200182016040528015610b175781602001602082028036833780820191505090505b5060019080519060200190610b2d929190610c5f565b506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610b7690611601565b60006040518083038185875af1925050503d8060008114610bb3576040519150601f19603f3d011682016040523d82523d6000602084013e610bb8565b606091505b5050905080610bf3576040517f10c8163f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610cd8579160200282015b82811115610cd75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c7f565b5b509050610ce59190610ce9565b5090565b5b80821115610d02576000816000905550600101610cea565b5090565b6000819050919050565b610d1981610d06565b82525050565b6000602082019050610d346000830184610d10565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d7a57610d79610d3a565b5b50565b6000819050610d8b82610d69565b919050565b6000610d9b82610d7d565b9050919050565b610dab81610d90565b82525050565b6000602082019050610dc66000830184610da2565b92915050565b6000604051905090565b600080fd5b600080fd5b610de981610d06565b8114610df457600080fd5b50565b600081359050610e0681610de0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e5a82610e11565b810181811067ffffffffffffffff82111715610e7957610e78610e22565b5b80604052505050565b6000610e8c610dcc565b9050610e988282610e51565b919050565b600067ffffffffffffffff821115610eb857610eb7610e22565b5b602082029050602081019050919050565b600080fd5b6000610ee1610edc84610e9d565b610e82565b90508083825260208201905060208402830185811115610f0457610f03610ec9565b5b835b81811015610f2d5780610f198882610df7565b845260208401935050602081019050610f06565b5050509392505050565b600082601f830112610f4c57610f4b610e0c565b5b8135610f5c848260208601610ece565b91505092915050565b60008060408385031215610f7c57610f7b610dd6565b5b6000610f8a85828601610df7565b925050602083013567ffffffffffffffff811115610fab57610faa610ddb565b5b610fb785828601610f37565b9150509250929050565b600080fd5b60008083601f840112610fdc57610fdb610e0c565b5b8235905067ffffffffffffffff811115610ff957610ff8610fc1565b5b60208301915083600182028301111561101557611014610ec9565b5b9250929050565b6000806020838503121561103357611032610dd6565b5b600083013567ffffffffffffffff81111561105157611050610ddb565b5b61105d85828601610fc6565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061109482611069565b9050919050565b6110a481611089565b82525050565b60006020820190506110bf600083018461109b565b92915050565b60008115159050919050565b6110da816110c5565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561111a5780820151818401526020810190506110ff565b83811115611129576000848401525b50505050565b600061113a826110e0565b61114481856110eb565b93506111548185602086016110fc565b61115d81610e11565b840191505092915050565b600060408201905061117d60008301856110d1565b818103602083015261118f818461112f565b90509392505050565b6000602082840312156111ae576111ad610dd6565b5b60006111bc84828501610df7565b91505092915050565b60006040820190506111da600083018561109b565b6111e7602083018461109b565b9392505050565b50565b60006111fe6000836110eb565b9150611209826111ee565b600082019050919050565b6000602082019050818103600083015261122d816111f1565b9050919050565b61123d816110c5565b811461124857600080fd5b50565b60008151905061125a81611234565b92915050565b600080fd5b600067ffffffffffffffff8211156112805761127f610e22565b5b61128982610e11565b9050602081019050919050565b60006112a96112a484611265565b610e82565b9050828152602081018484840111156112c5576112c4611260565b5b6112d08482856110fc565b509392505050565b600082601f8301126112ed576112ec610e0c565b5b81516112fd848260208601611296565b91505092915050565b6000806040838503121561131d5761131c610dd6565b5b600061132b8582860161124b565b925050602083015167ffffffffffffffff81111561134c5761134b610ddb565b5b611358858286016112d8565b9150509250929050565b60006060820190506113776000830186610d10565b6113846020830185610d10565b6113916040830184610d10565b949350505050565b6000819050919050565b6113ac81611399565b82525050565b600067ffffffffffffffff82169050919050565b6113cf816113b2565b82525050565b600061ffff82169050919050565b6113ec816113d5565b82525050565b600063ffffffff82169050919050565b61140b816113f2565b82525050565b6000819050919050565b600061143661143161142c846113d5565b611411565b6113f2565b9050919050565b6114468161141b565b82525050565b600060a08201905061146160008301886113a3565b61146e60208301876113c6565b61147b60408301866113e3565b6114886060830185611402565b611495608083018461143d565b9695505050505050565b6000815190506114ae81610de0565b92915050565b6000602082840312156114ca576114c9610dd6565b5b60006114d88482850161149f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061151b82610d06565b915061152683610d06565b925082821015611539576115386114e1565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115ad82610d06565b91506115b883610d06565b9250826115c8576115c7611573565b5b828206905092915050565b600081905092915050565b60006115eb6000836115d3565b91506115f6826111ee565b600082019050919050565b600061160c826115de565b915081905091905056fea2646970667358221220c1e03c0e5adde5dcf08ed301ab2f245c0b8ce12f19df7656175abf2d081566da64736f6c63430008090033",
  "devdoc": {
    "details": "This implemented Chainlink VRF v2 and Chainlink Keepers",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink keeper nodes call they look for the `upKeepNeeded` to return true. 1. Our time interval should have passed 2. The lottery should have at least 1 player, and have some ETH 3. Our subscription is funded with LINK 4. The lottery should be in an \"open\" state."
      }
    },
    "title": "Simple Raffle contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 244,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(RaffleState)238"
      },
      {
        "astId": 247,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 267,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 269,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)238": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}